import groovy.sql.Sql


class DataBase {

    def url = 'jdbc:postgresql://localhost:5432/linketinder'
    def user = 'tulio'
    def password = '123'
    def driver = 'org.postgresql.Driver'
    def sql = Sql.newInstance(url, user, password, driver)

    //Inicia a base de dados
    def init(){
        //Tabela Usuarios
        sql.execute('''CREATE TABLE IF NOT EXISTS usuarios(
        id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        nome VARCHAR(64) NOT NULL,
        nascimento VARCHAR(64) NOT NULL,
        email VARCHAR(64) NOT NULL,
        cpf VARCHAR(64) NOT NULL,
        estado VARCHAR(64) NOT NULL,
        pais VARCHAR(64) NOT NULL,
        cep VARCHAR(64) NOT NULL,
        descricao VARCHAR(64) NOT NULL        
        )''');

        //Tabela Competencias
        sql.execute('''CREATE TABLE IF NOT EXISTS competencias(
        id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        competencia VARCHAR(64) NOT NULL
        )''');

        //Tabela empresas
        sql.execute('''CREATE TABLE IF NOT EXISTS empresas(
        id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        nome VARCHAR(64) NOT NULL,
        email VARCHAR(64) NOT NULL,
        cnpj VARCHAR(64) NOT NULL,
        estado VARCHAR(64) NOT NULL,
        pais VARCHAR(64) NOT NULL,
        cep VARCHAR(64) NOT NULL,
        descricao VARCHAR(64) NOT NULL        
        )''');

        //Tabela Vagas
        sql.execute('''CREATE TABLE IF NOT EXISTS vagas(
        id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        nome VARCHAR(64) NOT NULL,
        descricao VARCHAR(64) NOT NULL,
        empresa_id INTEGER NOT NULL,
        FOREIGN KEY (empresa_id) REFERENCES empresas(id)
        )''');

        //Tabela Usuarios com competencias
        sql.execute('''CREATE TABLE IF NOT EXISTS usuarios_competencias(
        id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        usuario_id INTEGER NOT NULL,
        competencia_id INTEGER NOT NULL,
        FOREIGN KEY (usuario_id) REFERENCES usuarios(id),
        FOREIGN KEY (competencia_id) REFERENCES competencias(id)
        )''');

        //Tabela Vagas com competencias
        sql.execute('''CREATE TABLE IF NOT EXISTS vagas_competencias(
        id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        vaga_id INTEGER NOT NULL,
        competencia_id INTEGER NOT NULL,
        FOREIGN KEY (vaga_id) REFERENCES vagas(id),
        FOREIGN KEY (competencia_id) REFERENCES competencias(id)
        )''');


    //curtida entre empresas, vagas eusuarios
        sql.execute('''CREATE TABLE IF NOT EXISTS curtida_match(
        id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        usuario_id INTEGER NOT NULL,
        vaga_id INTEGER NOT NULL,
        empresa_id INTEGER NOT NULL,
        FOREIGN KEY (usuario_id) REFERENCES usuarios(id),
        FOREIGN KEY (vaga_id) REFERENCES vagas(id),
        FOREIGN KEY (empresa_id) REFERENCES empresas(id)
        )''');


    }

    //CRUD usuarios
    def insertUsuario(Candidato candidato){
        def params = [
                nome: candidato.nome,
                nascimento: candidato.dataNascimento,
                email: candidato.email,
                cpf: candidato.cpf,
                estado: candidato.estado,
                pais: candidato.pais,
                cep: candidato.cep,
                descricao: candidato.descricao
        ]
        def result = sql.executeInsert('''INSERT INTO usuarios(nome, nascimento, email, cpf, estado, pais, cep, descricao) VALUES (:nome, :nascimento, :email, :cpf, :estado, :pais, :cep, :descricao)''', params)
        int usuarioId = result[0][0] as Integer

        if(candidato.competencias && !candidato.competencias.isEmpty()){
            insertCompetencia(candidato.competencias, usuarioId, "usuario")
        }

        return usuarioId
    }
    def selectUsuario(){
        sql.eachRow('''SELECT * FROM usuarios''') { row ->
            println "ID: ${row.id} | Nome: ${row.nome} ${row.email}"
        }

    }
    def updateUsuario(Candidato candidato, int id){
        try{
            def params = [
                    id: id,
                    nome: candidato.nome,
                    nascimento: candidato.dataNascimento,
                    email: candidato.email,
                    cpf: candidato.cpf,
                    estado: candidato.estado,
                    pais: candidato.pais,
                    cep: candidato.cep,
                    descricao: candidato.descricao
                    ]

            sql.executeUpdate('''UPDATE usuarios SET
                                nome = :nome,
                                nascimento = :nascimento,
                                email = :email,
                                cpf = :cpf,
                                estado = :estado,
                                pais = :pais,
                                cep = :cep,
                                descricao = :descricao
                                WHERE id = :id
                                ''', params)
        }
        catch(Exception e){
            println("Erro ao atualizar usuário ${e.message}")
            return false;
        }

    }
    def deleteUsuario(int id){
        sql.execute('''DELETE FROM usuarios WHERE id = :id''', [id: id])
    }

    //CRUD empresas
    def insertEmpresa(Juridica juridica){
        def params = [
                nome: juridica.nome,
                email: juridica.email,
                cnpj: juridica.cnpj,
                estado: juridica.estado,
                pais: juridica.pais,
                cep: juridica.cep,
                descricao: juridica.descricao
        ]
        sql.executeInsert('''INSERT INTO empresas(nome, email, cnpj, estado, pais, cep, descricao) VALUES (:nome, :email, :cnpj, :estado, :pais, :cep, :descricao)''', params)

    }
    def selectEmpresa(){
        sql.eachRow('''SELECT * FROM empresas''') { row ->
            println "ID: ${row.id} | Nome: ${row.nome} ${row.email}"
        }
    }
    def updateEmpresa(Juridica juridica, int id){
        try{
            def params = [
                    id: id,
                    nome: candidato.nome,
                    email: candidato.email,
                    cpf: candidato.cpf,
                    pais: candidato.pais,
                    estado: candidato.estado,
                    cep: candidato.cep,
                    descricao: candidato.descricao
            ]

            sql.executeUpdate('''UPDATE empresas SET
                                nome = :nome,
                                email = :email,
                                cnpj = :cnpj,
                                pais = :pais,
                                estado = :estado,
                                cep = :cep,
                                descricao = :descricao
                                WHERE id = :id
                                ''', params)
        }
        catch(Exception e){
            println("Erro ao atualizar usuário ${e.message}")
            return false;
        }
    }
    def deleteEmpresa(){
        sql.execute('''DELETE FROM empresas WHERE id = :id''', [id: id])
    }

    //CRUD vagas
    def insertVaga(Vaga vaga){

        sql.withTransaction {
            def params = [
                    nome      : vaga.nome,
                    descricao : vaga.descricao,
                    empresa_id: vaga.empresa_id
            ]
            def result = sql.executeInsert('''INSERT INTO vagas(nome, descricao, empresa_id) VALUES (:nome, :descricao, :empresa_id)''', params)
            int vagaId = result[0][0] as Integer

            if (vaga.competencias && !vaga.competencias.isEmpty()) {
                insertCompetencia(vaga.competencias, vagaId, "vaga")
            }

            return vagaId
        }
    }
    def selectVaga(){
        sql.eachRow('''SELECT * FROM vagas''') { row ->
            println "ID: ${row.id} | Nome: ${row.nome} | Descricao:${row.descricao}"
        }
    }
    def updateVaga(Vaga vaga, int id){
        try{
            def params = [
                    id: id,
                    nome: vaga.nome,
                    descricao: vaga.descricao
            ]

            sql.executeUpdate('''UPDATE vagas SET
                                nome = :nome,
                                descricao = :descricao
                                WHERE id = :id
                                ''', params)
        }
        catch(Exception e){
            println("Erro ao atualizar usuário ${e.message}")
            return false;
        }
    }
    def deleteVaga(){
        sql.execute('''DELETE FROM vagas WHERE id = :id''', [id: id])
        sql.close()
    }

    //CRUD competencias
    def insertCompetencia(List<String> competencias, int id, String tipoId){

        try{
            competencias.each { competencia ->
                def competenciaExiste = sql.firstRow(
                        '''SELECT id FROM competencias WHERE competencia = ?'''
                        , [competencia.trim().toUpperCase()])

                int competenciaId

                if(!competenciaExiste){
                    def result = sql.executeInsert('''INSERT INTO competencias(competencia) VALUES (?)''', [competencia.trim().toUpperCase()])
                    competenciaId = result[0][0] as Integer
                }else{
                    competenciaId = competenciaExiste.id as Integer
                }

                if(tipoId.equalsIgnoreCase("usuario")){
                    sql.executeInsert('''
                        INSERT INTO usuarios_competencias(usuario_id, competencia_id) 
                        VALUES (?, ?)''', [id, competenciaId])

                }else if(tipoId.equalsIgnoreCase("vaga")){
                    sql.executeInsert('''
                        INSERT INTO vagas_competencias(vaga_id, competencia_id) 
                        VALUES (?, ?)''', [id, competenciaId])
                }
            }
            return true
        } catch(Exception e){
            println("Erro: ${e.message}");
            return false
        }
    }
    def selectCompetencia(){}
    def updateCompetencia(){}
    def deleteCompetencia(){}

}
